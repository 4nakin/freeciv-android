// This string is autogenerated by ChangeAppSettings.sh, do not change
// spaces amount
package org.renpy.android;

import java.io.*;

import android.app.Activity;
import android.util.Log;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.File;

import android.app.ProgressDialog;

import java.util.zip.GZIPInputStream;

import android.content.res.AssetManager;

import org.xeustechnologies.jtar.*;

class AssetExtract {

    private AssetManager mAssetManager = null;
    private Activity mActivity = null;
    
    AssetExtract(Activity act) {
        mActivity = act;
        mAssetManager = act.getAssets();
    }
    
    private ProgressDialog dialog = null;
    
    
    public void _recursiveDelete(File f, int root) {
        boolean willNotDelete = (root <= 2) && (f.getName().equals("saves") ||  f.getName().equals("config"));
        //if(root <= 2) Log.i("python", "delete " + willNotDelete + " " + root + " " + f.getName() + "\n");
        if(willNotDelete)
            // do not remove saves and config
            return;
        if (f.isDirectory()) {
            for (File r : f.listFiles()) {
                _recursiveDelete(r, root+1);
            }
        }
        f.delete();
    }
    
    public void recursiveDelete(File f) {
        Log.i("python", "recursive delete " + f.getPath());
        if (f.isDirectory()) {
            _recursiveDelete(f, 0);
        }
    }
    
    public void showDialog() {
        ((Activity)Hardware.context).runOnUiThread(new Runnable(){
            public void run() {
                AssetExtract.this.dialog = ProgressDialog.show(Hardware.context, "", "Installing application...", true);
            }
        });
    }
    
    public void hideDialog() {
        ((Activity)Hardware.context).runOnUiThread(new Runnable(){
            public void run() {
                AssetExtract.this.dialog.dismiss();
            }
        });
    }
    
    public boolean extractTar(String asset, String target) {
        
        byte buf[] = new byte[1024 * 1024];
        
        InputStream assetStream = null;
        TarInputStream tis = null;
        
        try {
            assetStream = mAssetManager.open(asset, AssetManager.ACCESS_STREAMING);
            tis = new TarInputStream(new BufferedInputStream(new GZIPInputStream(new BufferedInputStream(assetStream, 8192)), 8192));
        } catch (IOException e) {
            Log.e("python", "opening up extract tar", e);
            return false;
        }
        
        while (true) {
            TarEntry entry = null;

            try {
                entry = tis.getNextEntry();
            } catch ( java.io.IOException e ) {

                // A bug in harmony seems to cause this exception if the
                // gzip file has a negative checksum. Ignore it, and let 
                // things fail on their own if the error was real.
                if (e.getMessage().equals("Crc mismatch")) {
                    break;
                }
            
                Log.e("python", "extracting tar", e);
                return false;
            }

            if ( entry == null ) {
                break;
            }

            Log.i("python", "extracting " + entry.getName());
            
            if (entry.isDirectory()) {

                try {
                    new File(target +"/" + entry.getName()).mkdirs();
                } catch ( SecurityException e ) { };

                continue;
            }

            OutputStream out = null;
            String path = target + "/" + entry.getName();

            try {
                out = new BufferedOutputStream(new FileOutputStream(path), 8192);
            } catch ( FileNotFoundException e ) {
            } catch ( SecurityException e ) { };

            if ( out == null ) {
                if(entry.getName().equals("lib/freecivserver"))
                    continue;
                Log.e("python", "could not open " + path + " with name " + entry.getName());
                return false;
            }

            try {
                while (true) {
                    int len = tis.read(buf);
                    
                    if (len == -1) {
                        break;
                    }
                    
                    out.write(buf, 0, len);
                }
                
                out.flush();
                out.close();
            } catch ( java.io.IOException e ) {
                Log.e("python", "extracting tar", e);
                return false;
            }
        }

        try {
            tis.close();
            assetStream.close();
        } catch (IOException e) {
            // pass
        }
        
        return true;
    }
}
